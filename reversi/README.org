* Overview
This is a Java implementation of the game Reversi on a hexagonal grid. It
is built with extensibility in mind, but does not support alternative board
geometries (e.g. square). The codebase uses a Model-View-Controller
architecture. It is expected any who are attempting to hack on this codebase
have an intermediate understanding of Object Oriented Design and a fairly
solid grasp on Java.
* Quick start
A good way to get familiarized with the codebase is through selected reading.
Specifically, the Summarizers offer a good introduction to the coordinate
systems present all over the codebase and encompass fundamental operations
to gameplay.

Also suggested is a UML diagram, which can be generated by
IntelliJ IDEA Ultimate. A pre-generated diagram can be found in the root
directory of the project.

Here is an example usage, which demonstrates how to use the HexPlane, View,
and Summarizer components. It prints the model to stdout.
#+begin_src java
public static void renderToStdOut() {
    // create a new ReversiTextView, which will output the game board
    // managed by ReversiModel to stdout.
    ReversiView view = new ReversiTextView(System.out);
    // create a new HexPlane with radius 5, which is the side length
    // and the distance from the center to the outside edge
    HexPlane<Player> plane = new HexPlane<>(5);
    // iterate over the plane, setting various positions to various values
    for (int q = -2; q < 2; q++) {
      for (int r = -2; r < 2; r++) {
        if (r > 0 && q < 0) {
          plane.setElementAt(new AxialCoordinate(q, r), Player.PLAYER1);
        } else {
          plane.setElementAt(new AxialCoordinate(q, r), Player.PLAYER2);
        }
      }
    }
    // render the current state of the board, which should be empty
    view.render();
    /* Expected output to stdout:
             _ _ _ _ _
            _ _ _ _ _ _
           _ _ _ _ _ _ _
          _ _ _ _ _ _ _ _
         _ _ _ _ _ _ _ _ _
          _ _ _ _ _ _ _ _
           _ _ _ _ _ _ _
            _ _ _ _ _ _
             _ _ _ _ _
    ,*/
    // update the view with the modified plane
    view.setPlane(plane);
    view.render();
    /* Expected output to stdout:
             _ _ _ _ _
            _ _ _ _ _ _
           O O O O _ _ _
          _ O O O O _ _ _
         _ _ O O O O _ _ _
          _ _ X X O O _ _
           _ _ _ _ _ _ _
            _ _ _ _ _ _
             _ _ _ _ _
    ,*/
    // Use a Summarizer to find out the number of points that would be made
    // by a move at a given point
    int score = new PointsFromMoveAtPointSummarizer(
            new AxialCoordinate(-1, -3),
            Player.PLAYER1).summarize(plane);
    /* The move is being made here (represented by the χ):
             _ _ _ _ _
        --> χ _ _ _ _ _
           O O O O _ _ _
          _ O O O O _ _ _
         _ _ O O O O _ _ _
          _ _ X X O O _ _
           _ _ _ _ _ _ _
            _ _ _ _ _ _
             _ _ _ _ _
       Which can be seen to be worth 4 points, with 1 from the move itself and
       3 from flipping the Os between the χ and X (at q=2, r=-1). Because
       the move hasn't been made (just summarized), the board is unchanged and
       pieces unflipped.
    ,*/
    System.out.println(score);
    /* Expected output to stdout:
       4
    ,*/
}
#+end_src
* Key components
/Click on the name of the component to navigate to its source./
** [[file:src/reversi/controller/ReversiController.java][Controller]]
<<sec:Controller>>
The Controller is the crux of the machinery driving the game of Reversi.
It arbitrates between the Model and the View while managing necessary
subcomponents (e.g. the Agents). Depending on its agents, the Controller may
be synchronous or asynchronous.
** [[file:src/reversi/model/MutableReversiModel.java][Model]]
<<sec:Model>>
Driven by the Controller. Supports games of any positive size. If the radius
is 1, the initial board configuration (see [[file:src/reversi/model/ReversiModel.java::27][the doc comment]]
for ~reversi.model.ReversiModel~'s constructor).

<<sec:Summarizers>>
The Model is fairly "dumb"; it simply does what it's told or throws an
exception. The most advanced machinery available to the Model are
Summarizers. Summarizers calculate various things about the Model and the
state of its HexPlane, including (but not limited to) the set of points that
would be flipped if a move were made at a given point. Summarizers are
also used by the Controller to determine the legality of a move.
Summarizers are not given mutable access to the Model, but rather are
given a copy of the Model's HexPlane.
** [[file:src/reversi/view/ReversiView.java][View]]
<<sec:View>>
Driven by the Controller. The view is responsible for displaying the current
state of the game to the user, where the current state is dictated by the
Controller. The View may also receive callbacks from the Controller to
forward asynchronous events.
* Key subcomponents
/Click on the name of the component to navigate to its source./
** [[file:src/reversi/controller/agent/Agent.java][Agents]]
<<sec:Agents>>
Agents represent the players. They can represent humans or AI
implementations. AI Agents will decide their move when asked by the
Controller. Human Agents will either wait for human input or will return
Optional.empty() should no action be available at the time. Agents
(human or AI) may choose to block while deciding the move.
** Commands ([[file:src/reversi/command/ModelCommand.java][Model]] & [[file:src/reversi/command/ViewCommand.java][View]])
<<sec:Commands>>
Commands are ubiquitous across the project. They are often used as the
actions performed by a player or AI, or simply represent some compound
operation (e.g. a macro). Both the Model and the View have their version of
Commands, which can be used in tandem with the [[file:src/reversi/command/UnifiedCommand.java][UnifiedCommand]]. A
UnifiedCommand holds one or both types of Command for dispatch to the Model
and View by the Controller.
** [[file:src/reversi/hex/plane/HexPlane.java][HexPlane]]
<<sec:HexPlane>>
The HexPlane is the "board" of the game. It has a integer radius equal to
its side length. It can be accessed with both Axial and Cubical coordinates.
The HexPlane can be queried about the presence of a value at a given point,
and can accept a value to be put into that position should it be empty.
*** [[file:src/reversi/hex/coordinates/HexPlaneCoord.java][Coordinates]] ([[file:src/reversi/hex/coordinates/AxialCoordinate.java][Axial]] & [[file:src/reversi/hex/coordinates/CubicalCoordinate.java][Cubical]])
<<sec:Coordinates>>
There are two types of coordinates, Axial and Cubical.
Please see [[https://www.redblobgames.com/grids/hexagons][this article]] for an explanation of these coordinate systems.
* Source organization
To generate an interactive organization tree, open the readme in Emacs with
org-fstree installed (for Doom, use ~(package! org-fstree)~ in ~packages.el~)
and type ~C-c C-c~ on the following block:
#+BEGIN_FSTREE ./src
#+END_FSTREE
Otherwise, refer to the following tree:
/Click a directory to be directed to its description in this file./
/Click a file name to be directed to its source code./
src
└── reversi
    ├── [[sec:Commands][command]]
    │   ├── [[file:src/reversi/command/CommandAggregator.java][CommandAggregator.java]]
    │   ├── [[file:src/reversi/command/CommandParser.java][CommandParser.java]]
    │   ├── [[file:src/reversi/command/ModelCommand.java][ModelCommand.java]]
    │   ├── [[file:src/reversi/command/Move.java][Move.java]]
    │   ├── [[file:src/reversi/command/UnifiedCommand.java][UnifiedCommand.java]]
    │   └── [[file:src/reversi/command/ViewCommand.java][ViewCommand.java]]
    ├── [[sec:Controller][controller]]
    │   ├── action
    │   │   ├── [[file:src/reversi/controller/action/LeftClickOn.java][LeftClickOn.java]]
    │   │   ├── [[file:src/reversi/controller/action/PlayerAction.java][PlayerAction.java]]
    │   │   └── [[file:src/reversi/controller/action/RightClickOn.java][RightClickOn.java]]
    │   ├── [[sec:Agents][agent]]
    │   │   ├── [[file:src/reversi/controller/agent/Agent.java][Agent.java]]
    │   │   └── [[file:src/reversi/controller/agent/TextualBlockingPlayerAgent.java][TextualBlockingPlayerAgent.java]]
    │   ├── [[file:src/reversi/controller/Player.java][Player.java]]
    │   └── [[file:src/reversi/controller/ReversiController.java][ReversiController.java]]
    ├── exceptions
    │   ├── [[file:src/reversi/exceptions/AgentException.java][AgentException.java]]
    │   ├── [[file:src/reversi/exceptions/CommandNotFoundException.java][CommandNotFoundException.java]]
    │   ├── [[file:src/reversi/exceptions/IllegalCommandException.java][IllegalCommandException.java]]
    │   └── [[file:src/reversi/exceptions/MoveOutOfBoundsException.java][MoveOutOfBoundsException.java]]
    ├── [[sec:HexPlane][hex]]
    │   ├── [[sec:Coordinates][coordinates]]
    │   │   ├── [[file:src/reversi/hex/coordinates/AxialCoordinate.java][AxialCoordinate.java]]
    │   │   ├── [[file:src/reversi/hex/coordinates/CubicalCoordinate.java][CubicalCoordinate.java]]
    │   │   ├── [[file:src/reversi/hex/coordinates/HexIndexable.java][HexIndexable.java]]
    │   │   └── [[file:src/reversi/hex/coordinates/HexPlaneCoord.java][HexPlaneCoord.java]]
    │   ├── [[sec:HexPlane][plane]]
    │   │   └── [[file:src/reversi/hex/plane/HexPlane.java][HexPlane.java]]
    │   └── [[sec:Summarizers][summarizer]]
    │       ├── [[file:src/reversi/hex/summarizer/CoordsToInvertAtPointSummarizer.java][CoordsToInvertAtPointSummarizer.java]]
    │       ├── [[file:src/reversi/hex/summarizer/HexPlaneSummarizer.java][HexPlaneSummarizer.java]]
    │       ├── [[file:src/reversi/hex/summarizer/IsGameOverSummarizer.java][IsGameOverSummarizer.java]]
    │       ├── [[file:src/reversi/hex/summarizer/PlayerCoordsSummarizer.java][PlayerCoordsSummarizer.java]]
    │       ├── [[file:src/reversi/hex/summarizer/PointsFromMoveAtPointSummarizer.java][PointsFromMoveAtPointSummarizer.java]]
    │       └── [[file:src/reversi/hex/summarizer/TotalPointsSummarizer.java][TotalPointsSummarizer.java]]
    ├── [[sec:Model][model]]
    │   ├── [[file:src/reversi/model/MutableReversiModel.java][MutableReversiModel.java]]
    │   ├── [[file:src/reversi/model/ReversiModel.java][ReversiModel.java]]
    │   └── [[file:src/reversi/model/Summarizable.java][Summarizable.java]]
    └── [[sec:View][view]]
        ├── [[file:src/reversi/view/ReversiTextView.java][ReversiTextView.java]]
        └── [[file:src/reversi/view/ReversiView.java][ReversiView.java]]
